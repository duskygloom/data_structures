gcc ./main.c && ./a.out 

1. Traversal.
2. Insertion.
3. Deletion.
4. Sorting.
0. Delete the list and exit.
Response: 2
1. Insert at start.
2. Insert at end.
3. Insert at any position.
Response: 1
Value: 12

1. Traversal.
2. Insertion.
3. Deletion.
4. Sorting.
0. Delete the list and exit.
Response: 2
1. Insert at start.
2. Insert at end.
3. Insert at any position.
Response: 2
Value: 167

1. Traversal.
2. Insertion.
3. Deletion.
4. Sorting.
0. Delete the list and exit.
Response: 2 
1. Insert at start.
2. Insert at end.
3. Insert at any position.
Response: 3
Index, value: 1 10

1. Traversal.
2. Insertion.
3. Deletion.
4. Sorting.
0. Delete the list and exit.
Response: 1
1. Print list.
2. Count nodes.
Response: 1
Forward: [12, 10, 167 -> 12]
Backward: [167, 10, 12 -> 167]

1. Traversal.
2. Insertion.
3. Deletion.
4. Sorting.
0. Delete the list and exit.
Response: 3
1. Delete from start.
2. Delete from end.
3. Delete from any position.
Response: 1
Popped value: 12

1. Traversal.
2. Insertion.
3. Deletion.
4. Sorting.
0. Delete the list and exit.
Response: 1  
1. Print list.
2. Count nodes.
Response: 1
Forward: [10, 167 -> 10]
Backward: [167, 10 -> 167]

1. Traversal.
2. Insertion.
3. Deletion.
4. Sorting.
0. Delete the list and exit.
Response: 2 
1. Insert at start.
2. Insert at end.
3. Insert at any position.
Response: 1
Value: 60

1. Traversal.
2. Insertion.
3. Deletion.
4. Sorting.
0. Delete the list and exit.
Response: 4   
1. Sort ascending.
2. Sort descending.
Response: 1
Forward: [10, 60, 167 -> 10]
Backward: [167, 60, 10 -> 167]

1. Traversal.
2. Insertion.
3. Deletion.
4. Sorting.
0. Delete the list and exit.
Response: 0
