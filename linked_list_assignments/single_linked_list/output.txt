gcc ./main.c && ./a.out

1. Traversal.
2. Insertion.
3. Deletion.
4. Sorting.
0. Delete the list and exit.
Response: 2
1. Insert at start.
2. Insert at end.
3. Insert at any position.
Response: 1
Value: 15

1. Traversal.
2. Insertion.
3. Deletion.
4. Sorting.
0. Delete the list and exit.
Response: 2
1. Insert at start.
2. Insert at end.
3. Insert at any position.
Response: 2
Value: 20

1. Traversal.
2. Insertion.
3. Deletion.
4. Sorting.
0. Delete the list and exit.
Response: 2
1. Insert at start.
2. Insert at end.
3. Insert at any position.
Response: 3
Index, value: 0 10

1. Traversal.
2. Insertion.
3. Deletion.
4. Sorting.
0. Delete the list and exit.
Response: 1
1. Print list.
2. Count nodes.
Response: 1
List: [10, 15, 20]

1. Traversal.
2. Insertion.
3. Deletion.
4. Sorting.
0. Delete the list and exit.
Response: 3
1. Delete from start.
2. Delete from end.
3. Delete from any position.
Response: 2
Popped value: 20

1. Traversal.
2. Insertion.
3. Deletion.
4. Sorting.
0. Delete the list and exit.
Response: 1
1. Print list.
2. Count nodes.
Response: 1
List: [10, 15]

1. Traversal.
2. Insertion.
3. Deletion.
4. Sorting.
0. Delete the list and exit.
Response: 4
1. Sort ascending.
2. Sort descending.
Response: 2
Descending list: [15, 10]

1. Traversal.
2. Insertion.
3. Deletion.
4. Sorting.
0. Delete the list and exit.
Response: 1
1. Print list.
2. Count nodes.
Response: 1
List: [15, 10]

1. Traversal.
2. Insertion.
3. Deletion.
4. Sorting.
0. Delete the list and exit.
Response: 3
1. Delete from start.
2. Delete from end.
3. Delete from any position.
Response: 3
Index: 1 
Deleted value: 10

1. Traversal.
2. Insertion.
3. Deletion.
4. Sorting.
0. Delete the list and exit.
Response: 0
